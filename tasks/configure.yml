---
- name: Manage Debian locale
  community.general.locale_gen:
    name: "{{ postgresql_locale }}"
    state: present
  when: ansible_os_family == 'Debian'
  notify: postgresql_restart

- name: Manage RedHat locale
  when: ansible_os_family == 'RedHat'
  block:
    - name: Query available locale
      ansible.builtin.command: localectl list-locales
      changed_when: false
      register: _locale_query_list

    - name: Query configured locale
      ansible.builtin.command: localectl status
      changed_when: false
      register: _locale_query_config

    - name: Check requested locale
      ansible.builtin.assert:
        that: postgresql_locale in _locale_query_list.stdout_lines

    - name: Set locale configuration facts
      ansible.builtin.set_fact:
        _locale_config: "{{ _locale_query_config | regex_search('LANG=([^\n]+)', '\\1') | first }}"

    - name: Configure locale
      ansible.builtin.command:
        cmd: localectl set-locale LANG={{ postgresql_locale }}
      when: postgresql_locale != _locale_config
      changed_when: false

- name: Create PostgreSQL conf directory
  ansible.builtin.file:
    path: "{{ _postgresql_confdir }}"
    owner: "{{ _postgresql_user }}"
    group: "{{ _postgresql_group }}"
    state: directory
    mode: 0700

- name: Create PostgreSQL data directory
  ansible.builtin.file:
    path: "{{ _postgresql_datadir }}"
    owner: "{{ _postgresql_user }}"
    group: "{{ _postgresql_group }}"
    state: directory
    mode: 0700

- name: Manage PostgreSQL initialization
  when: _postgresql_initdb | bool
  block:
    - name: Initialize PostgreSQL database
      ansible.builtin.command:
        cmd: "{{ _postgresql_bindir }}/initdb -D {{ _postgresql_datadir }}"
        creates: "{{ _postgresql_datadir }}/PG_VERSION"
      become: true
      become_user: "{{ _postgresql_user }}"

    - name: Enable PostgreSQL checksums
      ansible.builtin.command:
        cmd: "{{ _postgresql_bindir }}/pg_checksums -D {{ _postgresql_datadir }} --enable"
      when: _postgresql_checksum_enable | bool
      changed_when: false

    - name: Cleanup stale initdb files
      ansible.builtin.file:
        path: "{{ _postgresql_datadir }}/{{ item }}"
        state: absent
      loop:
        - pg_ident.conf
        - pg_hba.conf
        - postgresql.conf

- name: Create PostgreSQL include directory
  ansible.builtin.file:
    path: "{{ _postgresql_conf_includedir }}"
    state: directory
    owner: "{{ _postgresql_user }}"
    group: "{{ _postgresql_group }}"
    mode: 0755

# - debug:
#     var: _postgresql_conf_main_manage

# - debug:
#     var: _postgresql_conf_ansible_file

# - debug:
#     var: postgresql_conf_ansible

# - fail:

- name: Manage PostgreSQL configuration
  when: _postgresql_conf_main_manage | bool
  block:
    - name: Manage PostgreSQL ansible include config
      ansible.builtin.copy:
        dest: "{{ _postgresql_conf_ansible_file }}"
        content: "{{ postgresql_conf_ansible }}"
        owner: "{{ _postgresql_user }}"
        group: "{{ _postgresql_group }}"
        mode: 0644
      when: postgresql_conf_ansible is defined
      notify: postgresql_reload

    - name: Destroy PostgreSQL ansible include config
      ansible.builtin.file:
        path: "{{ _postgresql_conf_ansible_file }}"
        state: absent
      when: postgresql_conf_ansible is not defined
      notify: postgresql_reload

    - name: List PostgreSQL alien config files
      ansible.builtin.find:
        path: "{{ _postgresql_conf_includedir }}"
        exclude: "{{ _postgresql_conf_exclude }}"
        recurse: false
      register: _query_includes

    - name: Drop PostgreSQL alien config files
      ansible.builtin.file:
        path: "{{ item }}"
      loop: "{{ _query_includes.files | map(attribute='path') }}"

    - name: Manage PostgreSQL main config
      ansible.builtin.template:
        src: postgresql.conf.j2
        dest: "{{ _postgresql_conf_main }}"
        owner: "{{ _postgresql_user }}"
        group: "{{ _postgresql_group }}"
        mode: 0644
      notify: postgresql_restart

- name: Manage PostgreSQL hba entries
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ _postgresql_conf_hba }}"
    owner: "{{ _postgresql_user }}"
    group: "{{ _postgresql_group }}"
    mode: 0644
  vars:
    _entries: "{{ postgresql_hba_entries }}"
  when: _postgresql_conf_hba_manage | bool
  notify: postgresql_reload

- name: Manage PostgreSQL ident entries
  ansible.builtin.template:
    src: pg_ident.conf.j2
    dest: "{{ _postgresql_conf_ident }}"
    owner: "{{ _postgresql_user }}"
    group: "{{ _postgresql_group }}"
    mode: 0644
  vars:
    _entries: "{{ postgresql_ident_entries }}"
  when: _postgresql_conf_ident_manage | bool
  notify: postgresql_reload

- name: Manage PostgreSQL profile configuration
  ansible.builtin.lineinfile:
    path: "{{ postgresql_profile }}"
    line: "PATH={{ _postgresql_bindir }}:$PATH"
    state: "{{ (postgresql_package_state == 'absent') | ternary('absent', 'present') }}"
    create: true
    owner: root
    group: root
    mode: 0644
