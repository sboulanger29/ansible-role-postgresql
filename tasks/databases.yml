---
- name: Set installation facts
  ansible.builtin.include_tasks: vars.yml

- name: Query existing databases
  community.postgresql.postgresql_info:
    filter:
      - "databases"
  become: true
  become_user: "{{ _postgresql_user }}"
  register: postgresql_databases_query

- name: Set postgresql database facts
  ansible.builtin.set_fact:
    _postgresql_databases_present: "{{ _present }}"
    _postgresql_databases_absent: "{{ _absent }}"
    _postgresql_databases_existing: "{{ _existing }}"
  vars:
    _databases: "{{ _postgresql_databases }}"
    _present: "{{ _databases | selectattr('state', 'equalto', 'present') }}"
    _existing: "{{ postgresql_databases_query.databases | default({}) | dict2items }}"
    _existing_names: "{{ _existing | map(attribute='key') }}"
    _absent: "{{ _databases | selectattr('name', 'in', _existing_names) | difference(_present) }}"

- name: Debug existing PostgreSQL databases
  ansible.builtin.debug:
    var: _postgresql_databases_present

- name: Debug target PostgreSQL databases
  ansible.builtin.debug:
    var: _postgresql_databases_present

- name: Debug existing PostgreSQL databases to delete
  ansible.builtin.debug:
    var: _postgresql_databases_absent

- name: Manage PostgreSQL databases
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(_postgresql_user) }}"
    state: "{{ item.state }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ _postgresql_databases_present }}"
  become: true
  become_user: "{{ _postgresql_user }}"

- name: Manage PostgreSQL database privileges
  community.postgresql.postgresql_privs:
    db: "{{ _database.db_connect | default(postgresql_default_database) }}"
    role: "{{ _role.name }}"
    privs: "{{ _role.privs | default(omit) }}"
    objs: "{{ _database.name }}"
    schema: "{{ _role.schema | default(omit) }}"
    type: database
    grant_option: "{{ _role.grant_option | default(omit) }}"
    session_role: "{{ _database.session_role | default(omit) }}"
    state: "{{ _role.state | default('present') }}"
  vars:
    ansible_ssh_pipelining: true
    _database: "{{ item.0 }}"
    _role: "{{ item.1 }}"
  loop_control:
    label: "{{ _database.name }}"
  loop: "{{ _postgresql_databases_present | subelements('roles', skip_missing='yes') }}"
  become: true
  become_user: "{{ _postgresql_user }}"
  environment:
    PGOPTIONS: "{{ _postgresql_pgoptions }}"

- name: Delete PostgreSQL database privileges
  community.postgresql.postgresql_privs:
    db: "{{ _database.db_connect | default(postgresql_default_database) }}"
    role: "{{ _role.name }}"
    privs: "{{ _role.privs | default(omit) }}"
    objs: "{{ _database.name }}"
    schema: "{{ _role.schema | default(omit) }}"
    type: database
    grant_option: "{{ _role.grant_option | default(omit) }}"
    session_role: "{{ _database.session_role | default(omit) }}"
    state: "absent"
  vars:
    ansible_ssh_pipelining: true
    _database: "{{ item.0 }}"
    _role: "{{ item.1 }}"
  loop_control:
    label: "{{ _database.name }}"
  loop: "{{ _postgresql_databases_absent | subelements('roles', skip_missing='yes') }}"
  become: true
  become_user: "{{ _postgresql_user }}"
  environment:
    PGOPTIONS: "{{ _postgresql_pgoptions }}"

- name: Delete PostgreSQL databases
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(_postgresql_user) }}"
    state: "{{ item.state }}"
    force: "{{ item.force | default('false') | bool }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ _postgresql_databases_absent }}"
  become: true
  become_user: "{{ _postgresql_user }}"
